<?php
/**
 * @file
 * SimpleTests for the User component of Patterns.
 * TODO: roles, permissions.
 */

class PatternsUserTestCase extends PatternsTestCase {

  var $user_tests_dir;

  static function getInfo() {
    return array(
      'name' => 'User component',
      'description' => 'Creates, modifies and deletes users.',
      'group' => 'Patterns',
    );
  }

  public function setUp() { 	
  	
  	$this->user_tests_dir = $this->getPatternsTestDir() . 'user/';
  	
    // Enable any modules required for the tests.
  	$modules = array('patterns_components',
  							     'patterns_yamlparser',
		);
  	 
    parent::setUp($modules);
  }
  
  public function testCreateModifyDelete() {
    $this->testRoleCreate();
    $this->testRoleModify();
    $this->testRoleDelete();
//    $this->testCreate();
//    $this->testModify();
//    $this->testDelete();
  }

  private function testRoleCreate() {
    // The role should not exist at this point.
    $role_count = db_select('role', 'r')
      ->fields('r', array('rid'))
      ->condition('name', 'test_role')
      ->countQuery()->execute()->fetchField();
    $this->assertIdentical($role_count, '0', t('The role should not exist at this point.'));

    // Run the pattern.
    parent::runFile('user_role_create.yaml', 'Role (create)', PatternsUserTestCase::USER_TESTS_DIR);

    $this->assertUniqueText(t('The role has been added.'));

    $role_count = db_select('role', 'r')
      ->fields('r', array('name'))
      ->condition('name', 'test_role')
      ->countQuery()->execute()->fetchField();
    $this->assertIdentical($role_count, '1', t('The test role should exist at this point.'));
  }

  private function testRoleModify() {
    // Run the pattern.
    parent::runFile('user_role_modify.yaml', 'Role (modify)', PatternsUserTestCase::USER_TESTS_DIR);

    // The role should exist with the modified values.
    $role_count = db_select('role', 'r')
      ->fields('r', array('name'))
      ->condition('name', 'test_role_mod')
      ->condition('weight', '10')
      ->countQuery()->execute()->fetchField();
    $this->assertIdentical($role_count, '1', t('The role should exist with the modified values.'));
  }

  private function testRoleDelete() {
    // Run the pattern.
    parent::runFile('user_role_delete.yaml', 'Role (delete)', PatternsUserTestCase::USER_TESTS_DIR);

    // The role should not exist at this point.
    $role_count = db_select('role', 'r')
      ->fields('r', array('name'))
      ->condition('name', 'test_role_mod')
      ->countQuery()->execute()->fetchField();
    $this->assertIdentical($role_count, '0', t('The role should not exist at this point.'));
  }

  private function testCreate() {
    // The user should not exist at this point.

    $user_count = db_select('users', 'u')
      ->fields('u', array('uid'))
      ->condition('name', 'test_uid')
      ->countQuery()->execute()->fetchField();

    $this->assertIdentical($user_count, '0', t('The user should not exist at this point.'));

    // Run the pattern.
    parent::runFile('user_create.yaml', 'Users (create)', $this->user_tests_dir);

    // Expected messages.
    $this->assertUniqueText(t('Created a new user account for test_uid.'));

    // The user should exist with the right values.
    $user = db_select('users', 'u')
      ->fields('u', array('uid'))
      ->condition('name', 'test_uid')
      ->countQuery()->execute()->fetchField();
    $this->verbose('usercount: ' . $user);
    $this->assertIdentical($user, 1, t('The test user should exist at this point.'));
    // TODO: Check fields.
  }

  private function testDelete() {
    // Run the pattern.
    parent::runFile('user_delete.yaml', 'Users (delete)', $this->user_tests_dir);

    // Expected messages.
    $this->assertUniqueText(t('')); // TODO

    // The user should not exist at this point.
    $user_count = db_select('users', 'u')
      ->fields('u', array('uid'))
      ->condition('uid', 'test_uid')
      ->countQuery()->execute()->fetchField();
    $this->assertIdentical($user_count, '0', t('The user should not exist at this point.'));
  }

  // TODO
  private function testModify() {
  }
}

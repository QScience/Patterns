<?php
/**
 * @file
 * Tests importing files.
 */

class PatternsImportTestCase extends PatternRunTestCase {

  const IMPORTING_TESTS_DIR = 'tests/importing/';

  public static function getInfo() {
    return array(
      'name' => 'Importing files',
      'description' => 'Tests importing patterns files.',
      'group' => 'Patterns',
    );
  }

  public function setUp() {
    // Enable any modules required for the tests.
    parent::setUp();
  }

  public function testImportFileFromSource() {

    $name = 'Test_Import_From_Source';
    $destination = realpath('./') . '/' . drupal_get_path('module', 'patterns') . '/tests/importing/imported/';
    
    // Fill the form.
    $edit = array();

    $edit['name'] = $name;
    $edit['content'] = $this->loadPattern('importing.yaml', self::IMPORTING_TESTS_DIR);
    $edit['destination'] = $destination;
    
//    $edit['#validate'] = 'patterns_import_validate';
//    $edit['#submit'] = 'patterns_import_submit';
    
     // Post the form.
    $this->drupalPost('admin/patterns/import/source', $edit, t('Import'));
    $this->assertNoText('Errors on the name of the pattern','Errors in the name of the patterns found');
    $this->assertNoText('Destination folder doesn\'t exist', 'Destination folder exists: ' . patterns_config_get_files_dir());
    
    //$p = patterns_db_load_pattern_from_name($name);
    
    $ps = db_select('patterns', 'p')
                    ->fields('p')
                    ->condition('p.name', $name)
                    ->execute()
                    ->fetchAll(); // return array of Std objs
  
    
    $this->assertEqual(count($ps), 1, t('One imported pattern found'));                 
    $p = $ps[0];                
                    
    $this->assertNotNull($p,'Imported pattern found in the db');
    $this->assertEqual($p->name, $name, 'Imported pattern has the correct name');
    
    
    // CleanUp
    $deleted = file_unmanaged_delete($destination.$name.'.yaml');
    
    $this->assertTrue($deleted,'Test files deleted');
  }
}

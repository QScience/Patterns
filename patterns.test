<?php

/**
 * @file
 * SimpleTests for Patterns.
 */

class PatternsPrivilegesTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Test privileges.',
      'description' => 'Test that only the ones with the right privileges can access Patterns.',
      'group' => 'Patterns',
    );
  }

  public function setUp() {
    // Enable any modules required for the tests.
    parent::setUp('patterns');
    // TODO: how to ensure that Spyc is installed?

    // Create users.
    $this->pat_user = $this->drupalCreateUser(array('administer patterns'));
    $this->std_user = $this->drupalCreateUser(array());
  }

  /**
   * Login users, load the Patterns list page.
   */
  function testPatterns() {
    // Login the patterns administrator.
    $this->drupalLogin($this->pat_user);
    $this->verifyAccess(200);

    // Login a regular user.
    $this->drupalLogin($this->std_user);
    $this->verifyAccess(403);
  }

  /**
   * Verify the logged in user has the desired access to the various menu nodes.
   *
   * @param integer $response HTTP response code.
   */
  private function verifyAccess($response = 200) {
    // View patterns list.
    $this->drupalGet('admin/patterns');
    $this->assertResponse($response);
    if ($response == 200) {
      $this->assertText(t('Patterns will be looked for in files under the following locations:'), t('Patterns list was displayed'));
    }
    // TODO: verify other pages

  }
}

/*
 * Abstract base class for testing pattern component behavior.
 */
abstract class PatternRunTestCase extends DrupalWebTestCase {

  public function setUp() {
    // Enable any modules required for the tests.
    parent::setUp('patterns');
    // TODO: how to ensure that Spyc is installed?

    // Create users.
    $this->pat_user = $this->drupalCreateUser(array('administer patterns'));
  }

  function runFile($filename, $name) {
    $patterntext = $this->loadPattern($filename);
    $this->runTest($patterntext, $name);
  }

  function runTest($pattern, $name) {
    // Login the patterns administrator.
    $this->drupalLogin($this->pat_user);
    $this->quickRun($pattern, $name, 'php');
    // TODO: Only run one mode in order to avoid duplicates, for now.
    //$this->quickRun($pattern, $name, 'batch');
  }

  /*
   * Runs a pattern through the Quick Run interface.
   */
  function quickRun($pattern, $name, $mode = 'php', $valid = TRUE) {
    // Fill the form.
    $edit = array();
    $edit['format'] = 'yaml'; // TODO
    $edit['mode'] = $mode;
    $edit['content'] = $pattern;

    // Post the form.
    $this->drupalPost('admin/patterns/quickrun', $edit, t('Run'));

    if ($valid) {
      // Check for a valid syntax run.
      $this->assertUniqueText(t('Pattern "@pattern" ran successfully.', array('@pattern' => $name)), 'Valid pattern runs without errors.');
      $this->assertNoText(t('Error(s) while processing pattern:'), 'Valid pattern does not produce errors.');
    }
    else {
      $this->assertUniqueText(t('Error(s) while processing pattern:'), 'Invalid pattern produces errors.');
      $this->assertNoText(t('Pattern "@pattern" ran successfully.', array('@pattern' => $name)), 'Invalid pattern does not run without errors.');
    }

  }
  /*
   * Loads a pattern text file from patterns/patterns/.
   * @filename The name of the pattern file.
   */
  function loadPattern($filename) {
    return file_get_contents(drupal_get_path('module', 'patterns') . '/patterns/' . $filename);
  }
}

class PatternsSystemComponent extends PatternRunTestCase {

  static function getInfo() {
    return array(
      'name' => 'Test the System component.',
      'description' => 'Enable and disable modules.',
      'group' => 'Patterns',
    );
  }

  /*
   * Check the database if a module is enabled/disabled.
   * @name Module name
   * @enabled TRUE iff the module should be enabled.
   */
  private function assertModule($name, $enabled = TRUE) {
    $forum = db_select('system', 's')
      ->fields('s', array('name'))
      ->condition('name', $name)
      ->condition('type', 'module')
      ->condition('status', $enabled ? '1' : '0')
      ->execute()
      ->rowCount();
    $this->assertEqual($forum, 1, $message = 'The ' . $name . ' module should ' . ($enabled ? '' : 'not ') . 'be enabled.');
  }

  public function testEnableDisable() {
    // Check for modules before running the pattern.
    $this->assertModule('aggregator', FALSE);
    $this->assertModule('forum', FALSE);
    $this->assertModule('overlay', TRUE);
    $this->assertModule('number', TRUE);

    // Run the pattern.
    parent::runFile('modules.yaml', 'Enable/disable modules');

    // Expected messages.
    $this->assertText(t('Module(s) forum, number enabled. No modules have been disabled.'), 'The forum module should get enabled.');
    // TODO: some of these will fail because of an error in the engine (running multiple tags).
    $this->assertText(t('No modules have been enabled. Module(s) overlay disabled.'), 'The overlay module should get disabled.');
    $this->assertText(t('Warning: Could not disable admin_menu because it is missing.'), 'Disabling a missing module gives a warning.');
    $this->assertText(t('Warning: Did not disable aggregator because it is already disabled.'), 'Disabling a disabled module gives a warning.');
    $this->assertText(t('Warning: Did not enable number because it is already enabled.'), 'Enabling an enabled module gives a warning.');

    // Check for modules after running the pattern.
    // TODO: it might be good to check if every other module is left untouched.
    $this->assertModule('aggregator', FALSE);
    $this->assertModule('forum', TRUE);
    $this->assertModule('overlay', FALSE);
    $this->assertModule('number', TRUE);
  }
}
// TODO: Create more test cases


<?php
/**
 * @file
 * Installation file for Patterns.
 */

require_once 'includes/patterns.config.inc';
require_once 'includes/patterns.io.inc';

/**
 * Implements hook_install().
 */
function patterns_install() {
}

/**
 * Implements hook_uninstall().
 */
function patterns_uninstall() {
  // TODO: delete variables
}

/**
 * Implements hook_schema().
 */
function patterns_schema() {
  $schema['patterns'] = array(
    'description' => 'Stores patterns information.',
    'fields' => array(
      'pid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique pattern ID.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 55,
        'default' => '',
        'description' => 'Machine readable name of this pattern.',
      ),
      'status' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Boolean indicating whether the pattern has been executed (enabled).',
      ),
      'public' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Boolean indicating whether the pattern is published (available for sharing via patterns server).',
      ),
      'file' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Path of the pattern file relative to Drupal root.',
      ),
      'updated' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '0',
        'description' => 'The Unix timestamp indicating when the pattern file was last time updated (modified).',
      ),
      'enabled' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '0',
        'description' => 'The Unix timestamp indicating when the pattern was last time executed.',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Title of the pattern.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Description of the pattern.',
      ),
      'pattern' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
        'description' => 'A serialized array containing pattern code.',
      )
    ),
    'primary key' => array('pid'),
    'unique keys' => array('name' => array('name'))
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 *
 * @param string $phase The phase in which hook_requirements is run (install|runtime).
 */
function patterns_requirements($phase) {
  $requirements = array();

 // Checking if patterns directory is writable
 // Must be done at installation and runtime
  if (!_patterns_io_is_patterns_dir_ready()) {
      $requirements['pdir'] = array(
        'title'       => t('Patterns files dir writable'),
        'description' => t("Patterns folder doesn't exist or is not writable: !path", array('!path' => patterns_config_get_files_dir())),
        'severity'    => REQUIREMENT_WARNING,
        'value'       => 'Not writable',
      );
    }
    else {
      $requirements['pdir'] = array(
        'title'       => t('Patterns files dir'),
        'severity'    => REQUIREMENT_OK,
        'value'       => 'Writable',
      );
    }

  switch ($phase) {
    case 'runtime':
      $path = libraries_get_path('spyc') . '/spyc.php';

      if (!file_exists($path)) {
        $requirements['spyc'] = array(
          'title'       => t('Spyc library (YAML parser)'),
          'description' => t('Patterns module requires Spyc library for working with YAML patterns. To enable YAML support, download the !spyc package to obtain spyc.php. Create a directory for the library (e.g. sites/all/libraries/spyc/) and place spyc.php there.',
                              array('!spyc' => l(t('spyc'), 'http://code.google.com/p/spyc/', array('absolute' => TRUE)))),
          'severity'    => REQUIREMENT_WARNING,
          'value'       => t('Missing'),
        );
      }
      else {
        require_once($path);
        $requirements['spyc'] = array(
          'title'       => t('Spyc library (YAML parser)'),
          'severity'    => REQUIREMENT_OK,
          'value'       => _get_file_phpdoc_version($path),
        );
      }
    break;
  }
  return $requirements;
}

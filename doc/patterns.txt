Drupal 7 Patterns Documentation
===============================
Qscience Team
v0.1, Aug 2011

// QScience Team <www.qlectives.eu>


// meta-data
:keywords: patterns, drupal, configuration, import, export
:description: Patterns allows easy configuration

Introduction
------------

Complex websites and web applications can be created by combining
configurations of Modules, Fields, Content Types, Menus, Blocks,
Categories, Roles / Permissions, etc.. This site setup and
configuration process is a very time consuming and repetitive
bottleneck.

Patterns module is built to bypass this bottleneck by managing and
automating site configuration. Site configuration is stored in YAML or
XML files called Patterns which are easy to read, modify, manage, &
share and can be executed manually or as a part of an automated web
site deployment.


Installation
------------

Patterns is installed as any other Drupal module. However, it makes
uses of external libraries which must be installed separately:
*+Spyc+* and *+Codemirror+*.


* http://code.google.com/p/spyc/[*+Spyc+*] is a native PHP library used to parse YAML files. It is
   necessary for the correct functioning of Patterns.

* http://codemirror.net/[*+Codemirror+*] is a Javascript library which
   considerably enhances the interface of the Patterns editor page. It
   is _not_ necessary, for the correct functioning of Patterns, but
   recommended.

Both libraries should be installed under *+sites/all/libraries/+*. 


[[pattern-example]]
What is a Pattern?
------------------

A pattern is a file is composed by a *+info+* section and a sequence of
_actions_ of the type *+create+*, *+modify+*, *+delete+* grouped in
categories (sections).

Categories can be arbitrarily defined (except for the reserved word
*+info+*) and are executed sequentially.


----------------------
# This is a comment
# Example Pattern

info: # mandatory name
  title: New Vocabulary
  description: Adds a new vocabulary to the website 
  author: QScience
  category: Examples
  
actions: # any name is good for this category

  - create: vocabulary
        name: Another Vocabulary
        machine_name: anothervoc
        description: Another interesting vocabulary
        hierarchy: 0

  - modify: vocabulary
        machine_name: anothervoc
	description: It was not that interesting after all
	# vid: 2

  - delete: vocabulary
        machine_name: anothervoc
        # vid: 2
        

-------------------

How Patterns works
------------------

Pattern works by parsing the pattern file and then constructing a form
which contains already the values for specific elements. The form is
then validated and submitted, as the 'submit' button was pressed from
a browser window. The only difference is that the process is sent to
the Drupal _batch_ system, which makes sure that the php script will not
timeout. 

How to implement Patterns in your custom module
-----------------------------------------------

You need to implement 5 patterns hooks, here explained in the same
order as they are called by Patterns module.

*******************************************************************
* *+hook_patterns()+*: tells Drupal that the module is able to handle
  pattern configurations, and specifies which tags and forms are
  supported.

* *+hook_patterns_prepare($action, $tag, &$data)+*: checks the input and adds default
 values. Eventually, it can raise errors which halts further execution
 of the pattern.

* *+hook_patterns_build($action, $tag, &$data)+*: gets the form data for the
 action. This can either be just the form values, or it can be the
 full _form_state_ object.

* *+hook_patterns_params($action, $tag, &$data)+*: returns extra parameters that the form may require.

* *+hook_patterns_cleanup($action, $tag, &$data)+*: performs optional additional operations,
   after the execution of the action is finished.
******************************************************************

where *+$action+* is one of the actions *+create+*, *+modify+*,
*+delete+*, and *+$tag+* is the specific command to execute
(e.g. *+vocabulary+*, *+field+*, etc.).

*+hook_patterns+* is called independently from the others hooks, which
 are invoked sequentially to perform an action. In particular, if
 calling *+hook_patterns_prepare+* does not raise error, a batch set
 will be created which will:

 . execute *+hook_patterns_build+*, and *+hook_patterns_params+*; 
 . submit the form;
 . execute *+hook_patterns_cleanup+*.


Return values
~~~~~~~~~~~~~

*+hook_patterns()+* 
^^^^^^^^^^^^^^^^^^^

Returns the following array of actions:
------------------
$action[] = array('action' => $action, 'tag' => $tag, 'descr' => 'Description', form_ids => array('form1_id','form2_id',...));
$action[] = ...
-----------------

where *+$action+* is one of the actions *+create+*, *+modify+*,
*+delete+*, and *+$tag+* is the specific command to execute
(e.g. *+vocabulary+*, *+field+*, etc.), and *+form_ids+* is an array
which contains the id of the forms which will be called when running
that specific action.


*+hook_patterns_build+*, *+hook_patterns_params+*, *+hook_patterns_cleanup+*
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

All the other hooks returns the following special associative array:

------------------
$result['success'] = TRUE/FALSE;
$result['msg'] 	   = array (msg  => 'some text', type => 'ERR'/'WARN'/'NOTICE');
$result['return']  = 'whatever_return_value';

return $result;
-----------------


Pattern execution modes
----------------------

Patterns execution can follow two distinct behaviors:

. *Extend*: adds the settings defined in the pattern file into the
    current instance, and leave untouched what not explicitly
    specified.

. *Run-Over*: re-configures the whole web site in order to create an
    instance with _exactly_ the settings defined by the pattern, and
    removes everything not explicitly specified.

Differences between Extend and Run-Over
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The action +create+ changes according to the behavior selected for the
execution.

- *create*:  
	     . _extends_ : always create a new entity;
	     . _run-over_:  always check if the target entity is existing, if not creates it.;

- *modify*: checks if the target entity is existing and then modify
   it. Does nothing if the entity is not found;

- *delete*: checks if the target entity is existing and then delete
   it. Does nothing if the entity is not found.

Entity Matching
^^^^^^^^^^^^^^^

Entities are matched on the base of their +id+, if provided, or more
commonly on their +machine name+.


List of all currently supported tags
------------------------------------

- field
- vocabulary
- term

